import Head from "next/head";
import styles from "@/styles/Home.module.scss";
import { Typography } from "@mui/material";
import { BasicButton } from "@/Components/Buttons/BasicButton";
import { useEffect, useState } from "react";
import axios from "axios";
import { PageTitle } from "@/Components/PageLayout/PageTitle";
import moment from "moment/moment";
import { IncompleteTaskView } from "@/Components/TaskViews/IncompleteTaskView";
import { CompleteTaskView } from "@/Components/TaskViews/CompleteTaskView";

const views = [
  { name: "incomplete", label: "Incomplete" },
  { name: "complete", label: "Complete" },
];

export default function Home() {
  const [tasks, setTasks] = useState([]);
  const [view, setView] = useState("incomplete");

  const fetchTaskList = () => {
    axios
      .get("http://localhost:8080/tasks/")
      .then((res) => {
        setTasks(res.data);
      })
      .catch((e) => {
        console.error(e);
      });
  };

  const redirectToTaskForm = () => {
    window.location = "/new";
  };

  const toggleCompleted = (task) => {
    axios
      .put(`http://localhost:8080/tasks/task/${task.id}`, {
        completed: task.completed === null ? true : !task.completed,
        completed_on: task.completed ? null : moment.now(),
      })
      .then(() => {
        fetchTaskList();
      })
      .catch((e) => {
        console.log(e);
      });
  };

  useEffect(() => {
    fetchTaskList();
  }, [view]);

  const incompleteTasksWithDueDate = tasks.filter(
    (task) => !task.completed && !!task.due_date
  );
  const incompleteTasksWithoutDueDate = tasks.filter(
    (task) => !task.completed && !task.due_date
  );
  const incompleteTasks = [
    ...incompleteTasksWithoutDueDate,
    ...incompleteTasksWithDueDate,
  ];
  const completeTasks = tasks.filter((task) => task.completed);

  return (
    <>
      <Head>
        <title>Todo</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <PageTitle
          button={
            <BasicButton label={"New Item"} onClick={redirectToTaskForm} />
          }
        >
          To-Do
        </PageTitle>

        <div className={styles.viewSelect}>
          {views.map((v) => (
            <Typography
              className={view === v.name && styles.active}
              onClick={() => setView(v.name)}
              variant="body1"
              component="div"
              key={v.name}
            >
              {v.label}
            </Typography>
          ))}
        </div>

        <div className={styles.body}>
          {view === "incomplete" ? (
            <IncompleteTaskView
              tasks={incompleteTasks}
              toggleCompleted={toggleCompleted}
            />
          ) : (
            <CompleteTaskView
              tasks={completeTasks}
              toggleCompleted={toggleCompleted}
            />
          )}
        </div>
      </main>
    </>
  );
}
